CLIENT send: 1		ads
SERVER recieve 1		ads
CLIENT recieve: 3	ads	ads

void change_left_win(){
    if (left_win != NULL) {
        delwin(left_win);
    }
    left_win = newwin(10, 80, 0, 0);
    wbkgd(left_win, COLOR_PAIR(1));
    box(left_win, 0, 0);
    wrefresh(left_win);
}

void change_right_win(){
    if (right_win != NULL) {
        delwin(right_win);
    }
    right_win = newwin(10, 20, 0, 80);
    wbkgd(right_win, COLOR_PAIR(2));
    box(right_win, 0, 0);
    wrefresh(right_win);
}

void change_down_win(){
    if (down_win != NULL) {
        delwin(down_win);
    }
    down_win = newwin(5, 100, 10, 0);
    wbkgd(down_win, COLOR_PAIR(3));
    box(down_win, 0, 0);
    wrefresh(down_win);
}

void handle_resize(int sig) {
    // Не делать ничего, чтобы предотвратить изменение размера
}
int main() {
    char name[MAX_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
    FILE *fp;
    struct mq_attr attr;
    attr.mq_flags = 0;
    attr.mq_maxmsg = 10;
    attr.mq_msgsize = sizeof(message_t);
    attr.mq_curmsgs = 0;
    service_queue = mq_open(QUEUE_NAME, O_RDWR);
    if (service_queue == -1) {
        perror("service mq_open");
        exit(1);
    }
    client_queue = mq_open(CLIENT_QUEUE_NAME, O_RDWR);
    if (client_queue == -1) {
        perror("client mq_open");
        exit(1);
    }
    sem_init(&sem, 0, 1);
    name_screen(name, service_queue);
    initscr();
    signal(SIGWINCH, handle_resize);
    clear();
    refresh();
    init_pairs();
    create_windows();
    cbreak();
    curs_set(FALSE);
    wmove(down_win, 1, 1);
    keypad(down_win, TRUE);
    pthread_t receiver_thread;
    pthread_create(&receiver_thread, NULL, receive_messages, NULL);
    signal(SIGINT, sig_handler);
    while (1) {
        message_t msg;
        create_windows();
        print_down_win(name);
        wgetnstr(down_win, msg.text, MAX_SIZE);
        msg.type = TEXT;
        strncpy(msg.client_name, name, MAX_NAME_LEN+1);
        if ((strcmp(msg.text, "exit") == 0) || (strcmp(msg.text, "e") == 0)) {
            sem_wait(&sem);
            msg.type = QUIT;
            if (mq_send(client_queue, (char *)&msg, sizeof(msg), 0) == -1) {
                perror("mq_send");
                sem_destroy(&sem);
                exit(1);
            }
            sem_post(&sem);
            endwin();
            exit(0);
        }
        if (strncmp(msg.text, "", 5) != 0) {
            sem_wait(&sem);
            if (mq_send(client_queue, (char *)&msg, sizeof(msg), 0) == -1) {
                perror("mq_send");
                sem_destroy(&sem);
                exit(1);
            }
            sem_post(&sem);
        }
        fp = fopen("log.txt", "a");
        fprintf(fp, "CLIENT send: %ld\t%s\t%s\n", msg.type, msg.text, msg.client_name);
        fclose(fp);
        memset(msg.text, 0, sizeof(msg.text));
    }
    sem_destroy(&sem);
}
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
CLIENT send: 2		ads
SERVER recieve 5	e	ads
